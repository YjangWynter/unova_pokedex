{"version":3,"sources":["logo.svg","components/Pokemon/index.js","components/Pokedex/index.js","App.js","reportWebVitals.js","index.js"],"names":["Component","entry","setPokemon","then","res","pokedex","NUM_POKEMON","entry_id","Math","floor","random","url","randomPokemon","a","axios","response","data","results","catch","error","console","log","pokemon","format","result","capitalize","name","getAbilities","getHeight","getWeight","getType","getPicture","getRandomMove","charAt","toUpperCase","slice","move_num","moves","length","move","abilities","i","is_hidden","push","ability","types","type","join","weight","toFixed","height","sprites","other","front_default","PokeDex","props","state","getPokemon","setState","src","this","picture","randomMove","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa8125de.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useState, useEffect, Component} from 'react'\nimport axios from 'axios'\n\nclass Pokemon extends Component{\n    constructor(){\n        super(props)\n        this.state = {\n            data: null\n        }\n    }\n    \n}\nexport default Pokemon","import React,{Component, useEffect, useState} from 'react';\nimport Pokemon from '../Pokemon'\n\nimport axios from 'axios'\n//URL for pokemon API's list of all pokemon from the Unova region\n//selects a random url to read the pokemon's data from the promise\nconst entry = setPokemon().then((res) => randomPokemon(res));\n\n/** Notes\n * -----------\n * At compile time for React, `getPokemon()` is null when exported \n * as the API has not been called properly and state has not added these changes\n * In order to export a proper result for this function I must find a way to call this\n * function one time and update the state of the result when importing the \n * this generated JSON as a component\n * \n * \n * \n * \n * \n * \n */\n//async functions\n// retrieves a list of objects containing all the urls for the Unova Pokedex\nasync function setPokemon() {\n    const unova_pokedex = 'https://pokeapi.co/api/v2/pokemon/?offset=493&limit=156/';\n    //console.log(\"Entered 1st function\");\n    return axios(unova_pokedex).then(response => response.data.results).catch((error) => console.log(`Error #1: ${error}`));\n};\n\n//fetches url then uses takes the response \nasync function getPokemon(pokemon) {\n    let data = await pokemon;\n    return axios(data).then((pokemon) => format(pokemon.data)).catch((error) => console.log(`Error #2: ${error}`));\n}\n\n//called to set the entry as the response to setPokemon() promise\nfunction randomPokemon(pokedex) {\n    const NUM_POKEMON = 156;\n    let entry_id = Math.floor((Math.random() * NUM_POKEMON) + 1);\n    let pokemon = pokedex[entry_id].url;\n    return pokemon\n}\n// outputs a formatted response after randomizing the pokemon and its move.\nfunction format(pokemon) {\n    //formatting the name of the pokemon to capitalize the first letter\n    let result = {\n        'name': capitalize(pokemon.name),\n        'abilities': getAbilities(pokemon),\n        'height': getHeight(pokemon),\n        'weight': getWeight(pokemon),\n        'types': getType(pokemon),\n        'picture': getPicture(pokemon),\n        'randomMove': getRandomMove(pokemon),\n    }\n    //print to the console the random pokemon's data\n    console.log(result)\n    return result\n}\n\nfunction capitalize(name) {\n    let cap_name = name.charAt(0).toUpperCase() + name.slice(1);\n    return cap_name;\n}\n\nfunction getRandomMove(pokemon) {\n    //generate a random number\n    let move_num = Math.floor((Math.random() * pokemon.moves.length) + 1);\n    //select the move with move number\n    let move_name = pokemon.moves[move_num].move.name;\n    //capitalize the move name\n    let move = capitalize(move_name);\n    //return move\n    return move;\n}\n\nfunction getAbilities(pokemon) {\n    let abilities = {\n        'common': [],\n        'hidden': []\n    }\n\n    for (let i = 0; i < pokemon.abilities.length; i++) {\n        if (pokemon.abilities[i].is_hidden === false) {\n            abilities['common'].push(capitalize(pokemon.abilities[i].ability.name))\n        } else {\n            abilities['hidden'].push(capitalize(pokemon.abilities[i].ability.name))\n        }\n\n    }\n    console.log(abilities)\n    return abilities\n}\n\nfunction getType(pokemon) {\n    let types = []\n\n    for (let i = 0; i < pokemon.types.length; i++) {\n        types.push(capitalize(pokemon.types[i].type.name))\n    }\n    if (types.length > 0){types = types.join('-')}\n    //  let type = types.join('-')\n    //  return type\n    return types\n}\n\nfunction getWeight(pokemon) {// converts kilograms to lbs\n    let weight = (0.22046226218488 * pokemon.weight).toFixed(2)\n    return weight\n}\n\nfunction getHeight(pokemon) {//converts hectameters to ft\n    return ((pokemon.height / 10) * 3.28084).toFixed(2)\n}\n\nfunction getPicture(pokemon) {//gets the picture\n    return pokemon.sprites.other['official-artwork'].front_default;\n}\nexport default class PokeDex extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            data: {}\n            }\n        }\n       \n    \n    componentDidMount(){\n        getPokemon(entry).then(data => this.setState({data}))\n    }\n    render(){\n        return(\n            <>\n            <h1>Unova Pokedex</h1>\n            <img src={this.state.data.picture}/>\n            <h2>{this.state.data.name}</h2>\n            <h3>Type: {this.state.data.types}</h3>\n            <h4>Details</h4>\n            <ul>\n                <li>Height: {this.state.data.height}ft</li>\n                <li>Weight: {this.state.data.weight}lbs</li>\n\n            </ul>\n            <h4>{this.state.data.name} used {this.state.data.randomMove}!</h4>\n            </>\n        )\n        /*\n        if (Pokemon.state === 'fulfilled'){\n            return <div>{Pokemon}</div>\n        }\n        */\n          \n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport PokeDex from './components/Pokedex';\n//import './pokedex.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <PokeDex/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}